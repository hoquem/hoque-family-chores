// lib/main.dart
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart'; // Import Firebase Core
import 'package:provider/provider.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';

// Adjust these import paths based on your project structure and name
import 'package:hoque_family_chores/presentation/providers/auth_provider.dart';
import 'package:hoque_family_chores/presentation/providers/gamification_provider.dart';
import 'package:hoque_family_chores/presentation/screens/login_screen.dart';
import 'package:hoque_family_chores/presentation/screens/dashboard_screen.dart';
import 'package:hoque_family_chores/services/gamification_service.dart';

// Import Firebase options generated by FlutterFire CLI
import 'firebase_options.dart';

// Flag to control Firebase initialization (set to false for development with mock services)
const bool useFirebase = false;

void main() async { 
  WidgetsFlutterBinding.ensureInitialized();
  await dotenv.load(fileName: ".env"); // Load the .env file
  
  // Initialize Firebase only if needed
  if (useFirebase) {
    try {
      await Firebase.initializeApp(
        options: DefaultFirebaseOptions.currentPlatform,
      );
      debugPrint('Firebase initialized successfully');
    } catch (e) {
      debugPrint('Failed to initialize Firebase: $e');
      // Continue without Firebase - app will use mock services
    }
  } else {
    debugPrint('Firebase initialization skipped - using mock services');
  }
  
  // Initialize the gamification service
  final gamificationService = MockGamificationService();
  
  runApp(MyApp(gamificationService: gamificationService));
}

class MyApp extends StatelessWidget {
  final GamificationServiceInterface gamificationService;
  
  const MyApp({super.key, required this.gamificationService});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (context) => AuthProvider()),
        ChangeNotifierProvider(create: (context) => GamificationProvider(gamificationService)),
      ],
      child: MaterialApp(
        title: 'Family Chores',
        theme: ThemeData(
          primarySwatch: Colors.indigo,
          useMaterial3: true,
        ),
        home: const AuthWrapper(),
      ),
    );
  }
}

class AuthWrapper extends StatelessWidget {
  const AuthWrapper({super.key});

  @override
  Widget build(BuildContext context) {
    final authProvider = Provider.of<AuthProvider>(context);

    if (authProvider.isLoggedIn) {
      return const DashboardScreen();
    } else {
      return const LoginScreen();
    }
  }
}
