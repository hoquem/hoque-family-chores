// lib/main.dart
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart'; // Import Firebase Core
import 'package:provider/provider.dart';
import 'package:flutter/foundation.dart';

// Adjust these import paths based on your project structure and name
import 'package:hoque_family_chores/presentation/providers/auth_provider.dart';
import 'package:hoque_family_chores/presentation/screens/login_screen.dart';
import 'package:hoque_family_chores/presentation/screens/dashboard_screen.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';

// Import the environment and data services
import 'package:hoque_family_chores/services/environment_service.dart';
import 'package:hoque_family_chores/services/data_service_factory.dart';
import 'package:hoque_family_chores/services/data_service.dart';

// Import your Firebase options if you generated it with FlutterFire CLI
// import 'firebase_options.dart'; // Usually generated by `flutterfire configure`

void main() async { 
  WidgetsFlutterBinding.ensureInitialized();
  
  // Load environment variables first
  await dotenv.load(fileName: ".env");
  
  // Initialize environment service
  final environmentService = EnvironmentService();
  
  // Only initialize Firebase when not in test environment
  if (environmentService.shouldConnectToFirebase) {
    try {
      await Firebase.initializeApp(
        // If you have Firebase options, uncomment the following line
        // options: DefaultFirebaseOptions.currentPlatform,
      );
      debugPrint('Firebase initialized successfully');
    } catch (e) {
      debugPrint('Error initializing Firebase: $e');
      // Handle Firebase initialization error
      // You might want to show a user-friendly message or fallback to mock data
      if (kDebugMode) {
        print('WARNING: Failed to initialize Firebase. Using mock data instead.');
      }
    }
  } else {
    debugPrint('Using mock data - Firebase initialization skipped');
  }
  
  // Get the appropriate data service based on environment
  final DataService dataService = DataServiceFactory.getDataService();
  
  runApp(MyApp(dataService: dataService));
}

class MyApp extends StatelessWidget {
  final DataService dataService;
  
  const MyApp({super.key, required this.dataService});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        // Provide the data service to the entire app
        Provider<DataService>.value(value: dataService),
        
        // Create auth provider with the data service
        ChangeNotifierProxyProvider<DataService, AuthProvider>(
          create: (_) => AuthProvider(),
          update: (_, dataService, authProvider) => 
              authProvider!..updateDataService(dataService),
        ),
      ],
      child: MaterialApp(
        title: 'Family App',
        theme: ThemeData(
          primarySwatch: Colors.indigo,
          useMaterial3: true,
        ),
        home: const AuthWrapper(),
      ),
    );
  }
}

class AuthWrapper extends StatelessWidget {
  const AuthWrapper({super.key});

  @override
  Widget build(BuildContext context) {
    final authProvider = Provider.of<AuthProvider>(context);

    if (authProvider.isLoggedIn) {
      return const DashboardScreen();
    } else {
      return const LoginScreen();
    }
  }
}
